{
  "config": {
    "hw_platform": ["MTP", "Surf", "RCM", "QRD"],
    "soc_id": ["618"]
  },
  "qsh_camera_imx688_6":{
    "owner": "qsh_camera_imx688_6",
    ".bus_info":{
      "comments": "Params for bus (i2c) transfers",
      "owner": "qsh_camera_imx688_6",
      ".primary":{
        "comments": "Parameters for ULP streaming mode communication with camera sensor via SNS COM port api",
        "owner": "qsh_camera_imx688_6",
        "bus_type":{ "type": "int", "ver": "0",
          "data": "0",
          "comments": "Communication mode of primary bus as per COM port api. Supports : 0 - i2c; 1 - spi; 3 - i3c_sdr; 4 - i3c_hdr_ddr; 5 - i3c_i2c_legacy"
        },
        "bus_instance":{ "type": "int", "ver": "0",
          "data": "9",
          "comments": "Custom bus instance to be used for primary communication with sensor"
        },
        "slave_config":{ "type": "int", "ver": "0",
          "data": "16",
          "comments": "Slave config for the sensor primary line. Only non-zero slave cfg will get registered with COM port api. Value here is right-shifted by 1, w.r.t sensor xml"
        },
        "min_bus_speed_khz":{ "type": "int", "ver": "0",
          "data": "1000",
          "comments": "Min communication speed supported by bus"
        },
        "max_bus_speed_khz":{ "type": "int", "ver": "0",
          "data": "1000",
          "comments": "Max communication speed supported by bus"
        },
        "reg_addr_type":{ "type": "int", "ver": "0",
          "data": "1",
          "comments": "Type of reg address used in communication; 0,1,2 values represent 8,16,32 bit as per COM port api"
        },
        "burst_support":{ "type": "int", "ver": "0",
          "data": "1",
          "comments": "Whether or not sensor supports burst data writes, ie, transferring data to write into multiple contiguous registers"
        }
      },
      ".secondary":{
        "comments": "Parameters for Motion detection mode communication with sensor via SNS COM port api",
        "owner": "qsh_camera_imx688_6",
        "bus_type":{ "type": "int", "ver": "0",
          "data": "0",
          "comments": "Communication mode of secondary bus as per COM port api. Supports : 0 - i2c; 1 - spi; 3 - i3c_sdr; 4 - i3c_hdr_ddr; 5 - i3c_i2c_legacy"
        },
        "bus_instance":{ "type": "int", "ver": "0",
          "data": "9",
          "comments": "Custom bus instance to be used for secondary communication with sensor"
        },
        "slave_config":{ "type": "int", "ver": "0",
          "data": "0",
          "comments": "Slave config for the sensor secondary line. If there is no separate address for MD mode, we set this as 0, to avoid registering it. Value here is right-shifted by 1, w.r.t sensor xml"
        },
        "min_bus_speed_khz":{ "type": "int", "ver": "0",
          "data": "1000",
          "comments": "Min communication speed supported by bus"
        },
        "max_bus_speed_khz":{ "type": "int", "ver": "0",
          "data": "1000",
          "comments": "Max communication speed supported by bus"
        },
        "reg_addr_type":{ "type": "int", "ver": "0",
          "data": "1",
          "comments": "Type of reg address used in communication; 0,1,2 values represent 8,16,32 bit as per COM port api"
        },
        "burst_support":{ "type": "int", "ver": "0",
          "data": "1",
          "comments": "Whether or not sensor supports burst data writes, ie, transferring data to write into multiple contiguous registers"
        }
      }
    },
    ".sensor_pwr_rail_info":{
      "comments": "LDO information required for the ASC sensor, reflecting those in PMIC driver and CamX xml",
      "owner": "qsh_camera_imx688_6",
      ".vana": {
        "comments": "As per vana subsection in camx xml",
        "owner": "qsh_camera_imx688_6",
        "resource_str": {"type": "str", "ver": "0",
          "data": "/pmic/client/aoc_avdd2",
          "comments": "Path for setting the source of power to the sensor power rail by PMIC driver; as defined in PAM table"
        },
        "ldo_pin_value_to_pwr_on": {"type": "int", "ver": "0",
          "data": "1",
          "comments": "Sensor is toggled on when the pin value matches given value"
        },
        ".ldo_pin":{
          "comments": "Pin info for LDO. If an external LDO is used by OEMs, they can put corresponding pin information (in same structure as GPIO pins) to drive the LDO",
          "owner": "qsh_camera_imx688_6",
          "pin_num": {"type": "int", "ver": "0",
            "data": "-1",
            "comments": "GPIO pin number where FW should toggle to control the LDO; set as -1 if PMIC is used instead of external LDO"
          },
          "is_chip_pin": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Whether the client is to be handled by TLMM (mux) or LPI; If using SSC GPIO pin no. instead of MSM pin no., is_chip_pin should be 0"
          },
          "drive_strength": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Drive strength supported by the LDO pin; Range 0-7 indicating 2,4,6,...,16mA"
          },
          "pull_type": {"type": "int", "ver": "0",
            "data": "3",
            "comments": "Pull-type of the LDO pin; Range 0-3 indicating no-pull, pull-down, pull-keep, pull-up"
          },
          "irq_trigger_type": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Type of associated IRQ trigger, Range 0-4 indicating rising-edge, falling-edge, dual-edge, high-level, low-level"
          }
        }
      },
      ".custom_reg1": {
        "comments": "As per custom_reg1 subsection in camx xml",
        "owner": "qsh_camera_imx688_6",
        "resource_str": {"type": "str", "ver": "0",
          "data": "/pmic/client/aoc_avdd3",
          "comments": "Path for setting the source of power to the sensor power rail by PMIC driver; as defined in PAM table"
        },
        "ldo_pin_value_to_pwr_on": {"type": "int", "ver": "0",
          "data": "1",
          "comments": "Sensor is toggled on when the pin value matches given value"
        },
        ".ldo_pin":{
          "comments": "Pin info for LDO. If an external LDO is used by OEMs, they can put corresponding pin information (in same structure as GPIO pins) to drive the LDO",
          "owner": "qsh_camera_imx688_6",
          "pin_num": {"type": "int", "ver": "0",
            "data": "-1",
            "comments": "GPIO pin number connected to the sensor, -1 indicates pin-data unavailable. This pin is -1 as it's an LDO and not a GPIO pin"
          },
          "is_chip_pin": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Whether the client is to be handled by TLMM (mux) or LPI; If using SSC GPIO pin no. instead of MSM pin no., is_chip_pin should be 0"
          },
          "drive_strength": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Drive strength supported by the LDO pin; Range 0-7 indicating 2,4,6,...,16mA"
          },
          "pull_type": {"type": "int", "ver": "0",
            "data": "3",
            "comments": "Pull-type of the LDO pin; Range 0-3 indicating no-pull, pull-down, pull-keep, pull-up"
          },
          "irq_trigger_type": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Type of associated IRQ trigger, Range 0-4 indicating rising-edge, falling-edge, dual-edge, high-level, low-level"
          }
        }
      },
      ".vio": {
        "comments": "As per vio subsection in camx xml",
        "owner": "qsh_camera_imx688_6",
        "resource_str": {"type": "str", "ver": "0",
          "data": "/pmic/client/aoc_dovdd2",
          "comments": "Path for setting the source of power to the sensor power rail by PMIC driver; as defined in PAM table"
        },
        "ldo_pin_value_to_pwr_on": {"type": "int", "ver": "0",
          "data": "1",
          "comments": "Sensor is toggled on when the pin value matches given value"
        },
        ".ldo_pin":{
          "comments": "Pin info for LDO. If an external LDO is used by OEMs, they can put corresponding pin information (in same structure as GPIO pins) to drive the LDO",
          "owner": "qsh_camera_imx688_6",
          "pin_num": {"type": "int", "ver": "0",
            "data": "-1",
            "comments": "GPIO pin number connected to the sensor, -1 indicates pin-data unavailable. This pin is -1 as it's an LDO and not a GPIO pin"
          },
          "is_chip_pin": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Whether the client is to be handled by TLMM (mux) or LPI; If using SSC GPIO pin no. instead of MSM pin no., is_chip_pin should be 0"
          },
          "drive_strength": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Drive strength supported by the LDO pin; Range 0-7 indicating 2,4,6,...,16mA"
          },
          "pull_type": {"type": "int", "ver": "0",
            "data": "3",
            "comments": "Pull-type of the LDO pin, Range 0-3 indicating no-pull, pull-down, pull-keep, pull-up"
          },
          "irq_trigger_type": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Type of associated IRQ trigger, Range 0-4 indicating rising-edge, falling-edge, dual-edge, high-level, low-level"
          }
        }
      },
      ".vdig": {
        "comments": "As per vdig subsection in camx xml",
        "owner": "qsh_camera_imx688_6",
        "resource_str": {"type": "str", "ver": "0",
          "data": "/pmic/client/aoc_dvdd2",
          "comments": "Path for setting the source of power to the sensor power rail by PMIC driver; as defined in PAM table"
        },
        "ldo_pin_value_to_pwr_on": {"type": "int", "ver": "0",
          "data": "1",
          "comments": "Sensor is toggled on when the pin value matches given value"
        },
        ".ldo_pin":{
          "comments": "Pin info for LDO. If an external LDO is used by OEMs, they can put corresponding pin information (in same structure as GPIO pins) to drive the LDO",
          "owner": "qsh_camera_imx688_6",
          "pin_num": {"type": "int", "ver": "0",
            "data": "-1",
            "comments": "GPIO pin number connected to the sensor, -1 indicates pin-data unavailable. This pin is -1 as it's an LDO and not a GPIO pin"
          },
          "is_chip_pin": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Whether the client is to be handled by TLMM (mux) or LPI; If using SSC GPIO pin no. instead of MSM pin no., is_chip_pin should be 0"
          },
          "drive_strength": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Drive strength supported by the LDO pin; Range 0-7 indicating 2,4,6,...,16mA"
          },
          "pull_type": {"type": "int", "ver": "0",
            "data": "3",
            "comments": "Pull-type of the LDO pin, Range 0-3 indicating no-pull, pull-down, pull-keep, pull-up"
          },
          "irq_trigger_type": {"type": "int", "ver": "0",
            "data": "0",
            "comments": "Type of associated IRQ trigger, Range 0-4 indicating rising-edge, falling-edge, dual-edge, high-level, low-level"
          }
        }
      }
    },
    ".power_save_params": {
      "comments": "Hook for OEM to implement its own 'power save sensor', ie, an external SNS sensor that determines if ASC should be suspended (e.g. if phone is sensed to be in pocket)",
      "owner": "qsh_camera_imx688_6",
      "enable": {"type": "int", "ver": "0",
        "data": "0",
        "comments": "Whether a stream is to be created to power-save sensor; 0 - disable ; 1 - enable ; Following params are applicable only if this is enabled"
      },
      "event_id_suspend": {"type": "int", "ver": "0",
        "data": "832",
        "comments": "Suspend the usecase to save power, when an event with given id is received by FW (broadcasted from the power-save sensor)"
      },
      "event_id_resume": {"type": "int", "ver": "0",
        "data": "833",
        "comments": "Resume the suspended usecase, when an event with given id is received by FW (broadcasted from the power-save sensor)"
      },
      "sensor_type": {"type": "str", "ver": "0",
        "data": "aoc_power_save",
        "comments": "The 'name' of the power save sensor implemented by OEM that FW will use to create a data stream to"
      }
    },
    ".gpio_info": {
      "comments": "Parameters for the 4 GPIO pins utilized by ASC",
      "owner": "qsh_camera_imx688_6",
      ".aux_pin": {
        "comments": "GPIO pin info for the aux/standby pin, also PONV or mode switching pin (MD <--> ULP streaming)",
        "owner": "qsh_camera_imx688_6",
        "pin_num": {"type": "int", "ver": "0",
          "data": "39",
          "comments": "Pin number of the GPIO connected to the sensor, -1 indicates pin-data unavailable"
        },
        "is_chip_pin": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Whether the client is to be handled by TLMM (mux) or LPI; If using SSC GPIO pin no. instead of MSM pin no., is_chip_pin should be 0"
        },
        "drive_strength": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Drive strength supported by the GPIO pin; Range 0-7 indicating 2,4,6,...,16mA"
        },
        "pull_type": {"type": "int", "ver": "0",
          "data": "3",
          "comments": "Pull-type of the GPIO, Range 0-3 indicating no-pull, pull-down, pull-keep, pull-up"
        }
      },
      ".reset_pin": {
        "comments": "GPIO pin info for RESET pin",
        "owner": "qsh_camera_imx688_6",
        "pin_num": {"type": "int", "ver": "0",
          "data": "38",
          "comments": "Pin number of the GPIO connected to the sensor, -1 indicates pin-data unavailable"
        },
        "is_chip_pin": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Whether the client is to be handled by TLMM (mux) or LPI; If using SSC GPIO pin no. instead of MSM pin no., is_chip_pin should be 0"
        },
        "drive_strength": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Drive strength supported by the GPIO pin; Range 0-7 indicating 2,4,6,...,16mA"
        },
        "pull_type": {"type": "int", "ver": "0",
          "data": "3",
          "comments": "Pull-type of the GPIO, Range 0-3 indicating no-pull, pull-down, pull-keep, pull-up"
        }
      },
      ".dri_pin": {
        "comments": "GPIO pin info for DRI (data ready interrupt) pin, used for getting MD (motion detection) interrupt",
        "owner": "qsh_camera_imx688_6",
        "pin_num": {"type": "int", "ver": "0",
          "data": "95",
          "comments": "Pin number of the GPIO connected to the sensor, -1 indicates pin-data unavailable"
        },
        "is_chip_pin": {"type": "int", "ver": "0",
          "data": "1",
          "comments": "Whether the client is to be handled by TLMM (mux) or LPI; If using SSC GPIO pin no. instead of MSM pin no., is_chip_pin should be 0"
        },
        "drive_strength": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Drive strength supported by the GPIO pin; Range 0-7 indicating 2,4,6,...,16mA"
        },
        "pull_type": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Pull-type of the GPIO, Range 0-3 indicating no-pull, pull-down, pull-keep, pull-up"
        },
        "irq_trigger_type": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Type of associated IRQ trigger, Range 0-4 indicating rising-edge, falling-edge, dual-edge, high-level, low-level"
        }
      }
    },
    ".als_params":{
      "comments": "Params for ALS control",
      "owner": "qsh_camera_imx688_6",
      "als_enable":{"type": "int", "ver": "0",
        "data": "1",
        "comments": "If sensor supports ALS"
      },
      "als_reg_cnt":{"type": "int", "ver": "0",
        "data": "3",
        "comments": "Num of registers to be read from the sensor to get full ALS value; range [base .... base + als_reg_cnt - 1] is combined in big-endian format"
      },
      "als_reg_base":{"type": "int", "ver": "0",
        "data": "12833",
        "comments": "Base register address to start reading ALS value from, until cnt amount"
      },
      "als_reg_hold":{"type": "int", "ver": "0",
        "data": "12836",
        "comments": "Register addr to program ALS hold settings onto the sensor; to hold the ALS value (not modify), when reading the als_reg_cnt registers, and release afterward"
      },
      "min_als_settle_time_ms":{"type": "int", "ver": "0",
        "data": "66",
        "comments": "Minimum waiting time from enabling sensor for ALS values to settle"
      }
    },
    ".aux_pin_params":{
      "comments": "Parameters to control aux pin, if sensor requires to toggle GPIO between ULP and MD/ALS mode",
      "owner": "qsh_camera_imx688_6",
      ".motion_detect": {
        "comments": "Params to use when toggling aux pin to put sensor in MD mode",
        "owner": "qsh_camera_imx688_6",
        "value": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Whether motion-detection mode is set by GPIO high or low state; 0/1 value indicates low/high"
        },
        "delay_ms": {"type": "int", "ver": "0",
          "data": "1",
          "comments": "Waiting delay (in millisec) after pulling the GPIO pin for MD"
        }
      },
      ".ulp_streaming": {
        "comments": "Params to use when toggling aux pin to put sensor in ULP streaming mode",
        "owner": "qsh_camera_imx688_6",
        "value": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Whether ULP streaming mode is set by GPIO high or low state; 0/1 value indicates low/high"
        },
        "delay_ms": {"type": "int", "ver": "0",
          "data": "0",
          "comments": "Waiting delay (in millisec) after pulling the GPIO pin for ULP streaming"
        }
      }
    },
    ".misc_params":{
      "comments": "Miscellanous params to control frame output",
      "owner": "qsh_camera_imx688_6",
      "csid_fit_scheme":{"type": "int", "ver": "0",
        "data": "1",
        "comments": "If sensor output is larger than what ISP limits, HW can center-crop to fit or sub-sample to fit the data coming in. 0 - crop; 1 - subsample. Irrelevant if frame is within limit"
      },
      "use_tpg":{"type": "int", "ver": "0",
        "data": "0",
        "comments": "INTERNAL ONLY - Enable to get frames from the Test pattern generator instead of streaming frames from the camera sensor"
      },
      "max_aec_frame_settle_cnt":{"type": "int", "ver": "0",
        "data": "0",
        "comments": "Max number of frames to run AEC warm start-up on (can be used for warm-startup in non-MD sensor cases)"
      },
      "skip_stg1_prog_if_possible":{"type": "int", "ver": "0",
        "data": "1",
        "comments": "Allow FW to optimize away unnecessary stage 1 sensor programming if possible (e.g. if delivery is time-based), saving latency and power; certain sensors might require special pre-stream-on and post-stream-off settings in XML to work properly"
      },
      "csiphy_num":{"type": "int", "ver": "0",
        "data": "2",
        "comments": "Which PHY (e.g. PHY2 or PHY4) is the sensor connected to. In the given example, possible values are 2 or 4."
      }
    },
    ".md_poll_params":{
      "comments": "INTERNAL ONLY - Enable to get frames from the Test pattern generator instead of streaming frames from the camera sensor",
      "owner": "qsh_camera_imx688_6",
      "md_poll_freq_ms":{"type": "int", "ver": "0",
        "data": "0",
        "comments": "To enable MD polling. This value is set as the utimer delivery period, similar to time-based mode; polling is done on timer events"
      },
      "md_detection_reg":{"type": "int", "ver": "0",
        "data": "12886",
        "comments": "Register address to read Motion detection result from, if MD polling is used"
      }
    }
  }
}
