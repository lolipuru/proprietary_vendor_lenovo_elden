// CL Kernel Source Code for StructureChangeBrightness Algorithm
// Version 1.0.0

__kernel void StructureChangeBrightness(
    __global float *rgb)
{
   int i = get_global_id(0);
   int j = get_global_id(1);
   int width = get_global_size(0);
   int height = get_global_size(1);

   constant int lutTable[256 * 3] = {
        0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,
        11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,22,23,23,24,25,26,
        27,28,29,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,
        49,50,51,52,53,55,56,57,58,59,61,62,63,64,66,67,68,69,71,72,73,75,
        76,77,79,80,81,83,84,85,87,88,90,91,92,94,95,97,98,99,101,102,104,
        105,107,108,110,111,113,114,116,117,118,120,121,123,124,126,127,129,
        130,132,133,135,136,138,139,141,142,144,145,147,148,150,152,153,154,
        156,157,159,160,162,163,165,166,168,169,171,172,174,175,177,178,180,
        181,182,184,185,187,188,189,191,192,194,195,196,198,199,200,202,203,
        204,205,207,208,209,211,212,213,214,215,217,218,219,220,221,222,223,
        225,226,227,228,229,230,231,232,233,234,235,236,237,237,238,239,240,
        241,242,242,243,244,245,245,246,247,247,248,248,249,249,250,250,251,
        251,252,252,253,253,253,254,254,254,254,254,255,255,255,255,255,255,255,
        //1
        0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,
        11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,22,23,23,24,25,26,
        27,28,29,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,
        49,50,51,52,53,55,56,57,58,59,61,62,63,64,66,67,68,69,71,72,73,75,
        76,77,79,80,81,83,84,85,87,88,90,91,92,94,95,97,98,99,101,102,104,
        105,107,108,110,111,113,114,116,117,118,120,121,123,124,126,127,129,
        130,132,133,135,136,138,139,141,142,144,145,147,148,150,152,153,154,
        156,157,159,160,162,163,165,166,168,169,171,172,174,175,177,178,180,
        181,182,184,185,187,188,189,191,192,194,195,196,198,199,200,202,203,
        204,205,207,208,209,211,212,213,214,215,217,218,219,220,221,222,223,
        225,226,227,228,229,230,231,232,233,234,235,236,237,237,238,239,240,
        241,242,242,243,244,245,245,246,247,247,248,248,249,249,250,250,251,
        251,252,252,253,253,253,254,254,254,254,254,255,255,255,255,255,255,255,
        //2
        0,0,0,0,0,1,1,1,1,1,2,2,2,3,3,3,3,4,4,5,5,5,6,6,7,7,8,8,9,9,10,10,
        11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,22,23,23,24,25,26,
        27,28,29,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,
        49,50,51,52,53,55,56,57,58,59,61,62,63,64,66,67,68,69,71,72,73,75,
        76,77,79,80,81,83,84,85,87,88,90,91,92,94,95,97,98,99,101,102,104,
        105,107,108,110,111,113,114,116,117,118,120,121,123,124,126,127,129,
        130,132,133,135,136,138,139,141,142,144,145,147,148,150,152,153,154,
        156,157,159,160,162,163,165,166,168,169,171,172,174,175,177,178,180,
        181,182,184,185,187,188,189,191,192,194,195,196,198,199,200,202,203,
        204,205,207,208,209,211,212,213,214,215,217,218,219,220,221,222,223,
        225,226,227,228,229,230,231,232,233,234,235,236,237,237,238,239,240,
        241,242,242,243,244,245,245,246,247,247,248,248,249,249,250,250,251,
        251,252,252,253,253,253,254,254,254,254,254,255,255,255,255,255,255,255,
   };

   int framePlane = width * height;
   const int index = j * width + i;
   float brightness = 0.35f;
   int rIndex = index;
   int gIndex = framePlane + index;
   int bIndex = framePlane * 2 + index;
   int r = *(rgb + rIndex);
   int g = *(rgb + gIndex);
   int b = *(rgb + bIndex);

   *(rgb + rIndex) = r * (1 - brightness) + lutTable[r] * brightness;
   *(rgb + gIndex) = g * (1 - brightness) + lutTable[256 + g] * brightness;
   *(rgb + bIndex) = b * (1 - brightness) + lutTable[256 * 2 + b] * brightness;
   if (rgb[rIndex] > 0xff) rgb[rIndex] = 0xff;
   if (rgb[gIndex] > 0xff) rgb[gIndex] = 0xff;
   if (rgb[bIndex] > 0xff) rgb[bIndex] = 0xff;
   if (rgb[rIndex] < 0) rgb[rIndex] = 0;
   if (rgb[gIndex] < 0) rgb[gIndex] = 0;
   if (rgb[bIndex] < 0) rgb[bIndex] = 0;
}
